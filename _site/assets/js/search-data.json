{
  
  "0": {
    "title": "Quickstart Guide",
    "content": "Quickstart Guide . This guide installs a universal IP cellular connectivity solution onto the Raspbian OS targeting the PiloT HAT board and Raspberry PI (RPi) hardware. . NetWorkManager, NetworkManager GUI and ModemManager are installed onto a Raspbian OS . NetworkManagers GUI (NetworkManager Applet) is used to configure cellular IP connectivity and to stop, start and monitor IP connections . This QuickStart guide requires . Raspberry Pi | Standard Raspian desktop installation *** | Pilot board and USB cable | . . Install PiloT scripts . Clone the project into your RPi (maybe use a shell terminal). This creates a local copy of the project which includes this documentation and any project related scripts git clone http://github.com/johnofleek/PiloT . | Install the minicom command line terminal emulation application sudo apt-get install minicom . | Power up the PiloT board . From a shell terminal - power on the PiloT using a convenient script (doesn’t apply to uPiloT) ./pilotOn.sh . If this script fails to power up the PiloT Check that the wiringPi version installed on on your RPi Raspian is compatible with the RPi hardware in use. For example at the time of writing the RPi4 HW needs an updated wiringPi install . | For information on your PiloT’s LED behaviour click LED behaviour and follow the links to the module fitted to your PiloT | . PiloT modem check and set configuration . To enable AT commands to be sent to the PiloT modem - run minicom (check the actual serial port to use) - note that if NetworkManager ModemManager is running then stop them before trying to send commands to the modem sudo minicom -D /dev/ttyACM0 . | Read the PiloT modem information Type the following AT command into minicom - the PiloT modem will report information about itself such as it’s Firmware version. On some modems the serial port times out when there is no activity - the first carriage return will wake the modem up &lt;CR&gt; ATi9&lt;CR&gt; . | Check the PiloT modem information A number of PiloT + RPi + Raspbian combinations have been tested, they are listed here Here are some things to check if a problem occurs at some point later in the QuickStart process Does the modem appear in the list but the reported modem firmware is older than in the list? It’s possible to update the modem firmware by connecting the PiloT USB port to a Windows PC and use a one click .exe installer from here to install updated firmware into the PiloT modem | Check the reported PiloT modem type is listed? | Check if your RPi variant is listed? | Check if your Raspian version is listed | Check the NetworkManager version? | . | Configure the PiloT modem as required (based on firmware identified above) Carry out the modem specific configuration instructions Please pay particular attention to the usb composition setting - if in doubt check the AT command manual for the particular modem that is being used - if it’s supported by the modem a composition with an MBIM setting is recommended | . | Power down the PiloT HAT by running the following script ./pilotOff.sh . | Reboot the RPi | . Install required RPi apps . If necessary - power down the PiloT HAT ./pilotOff.sh . | Install network-manager sudo apt-get install network-manager . | Install the GUI network-manager-gnome sudo apt-get install network-manager-gnome . | . Uninstall RPi apps not required . Remove openresolv and dhcpcd as they interfere with the operation of network manager sudo apt purge openresolv dhcpcd5 . It is also possible to uninstall the dhcpcd GUI as it’s no longer functional . | Reboot the RPi | . Configure the cellular network connection . From a shell terminal power on the PiloT by executing the script ./pilotOn.sh . | Wait for Mobile Broadband to appear in the NetworkManager GUI this should be visible on the Rpi Panel (probably top right) | Use the NetworkManager GUI to configure your wwan0 settings such as APN / username / password etc - maybe use some variant of these examples | If everything is installed and configured correctly NetworkManager should connect the modem when the mobile broadband profile you created is clicked in the NetworkManager GUI | To power down the PiloT run the following script ./pilotOff.sh . | Notes . The instructions assume that the git project has been cloned into the users home directory. To access or run the power control scripts . cd ~/Pilot/scripts_pilotControl . | The paths used in this guide - for example ./pilotOn.sh assumes that the user has changed directory to the directory which contains the pilotOn.sh script - the shell command [ls] will list what is available in a directory . | To start a Raspbian shell terminal - hold down keys [CTRL] [ALT] T or use the RPi Terminal icon . | Desktop installation was selected so that NetworkManager GUI can be used. NetworkManager GUI provides a simple way to control and observe NetManager behaviour, however, the underlying technology will work with a non-GUI system . | The NetworkManager GUI is called the network manager applet in it’s about box . | .",
    "url": "http://localhost:4000/docs/networkManagerDocs/Quickstart.html",
    "relUrl": "/docs/networkManagerDocs/Quickstart.html"
  }
  ,"1": {
    "title": "Speed test results",
    "content": "Test methods . Originally I used speedtest.net in the RPi4 browser but will be switching to command line like this. . ~/Pilot $ speedtest-cli Retrieving speedtest.net configuration... Testing from Three (94.196.182.81)... Retrieving speedtest.net server list... Selecting best server based on ping... Hosted by Redraw Internet (London) [2.56 km]: 64.756 ms Testing download speed................................................................................ Download: 5.17 Mbit/s Testing upload speed...................................................................................................... Upload: 2.09 Mbit/s . Install speedtest-cli . sudo apt install speedtest-cli . Note the speedtest-cli is written in Python so probably can be modified or repurposed for automated testing . 02 PAYG SIM testing . With a new PAYG SIM the modem could not IP connect. After a £10 top up - still no connection After £20 the 5GB contracted started and it worked Disconnecting / reconnecting the antenna caused a massive delay before the modem could reconnect . Using RPi4 . Using Network manager / MBIM . Windows - M.2 adapter - EM7455 - 02 PAYG . Desk main antenna only UP 20 Mbps DOWN 20 MBPS . With a diversity (FLAT type) antenna and FLAT antenna . DOWN 28.2 Mbps UP 20.0 Mbps . Windows - Pilot - HL7692 - 02 PAYG . Flat antenna With modem forced to LTE only DOWN 11.0 Mbps UP 4.6 Mbps . RPi4 - Pilot - HL7692 - 02 PAYG . Flat antenna With modem forced to LTE only DOWN 9.02 Mbps UP 4.7 Mbps . Vodafone . Using RPi4 Using Network manager / MBIM . RPi4 - Pilot - HL7692 - Vodafone PAYG . Flat antenna With modem LTE / 2G DOWN 8.42 Mbps UP 4.65 Mbps Ping 33ms . Three . Using RPi4 . RPi4 -Pilot - HL8548 - Three PAYG - PPP via networkManager . Flat antenna Connection via Network manager and PPP 3G DOWN 5.49 Mbps UP 3.74 Mbps . With cli . Testing from Three (94.196.182.81)... Retrieving speedtest.net server list... Selecting best server based on ping... Hosted by Redraw Internet (London) [2.56 km]: 64.719 ms Testing download speed................................................................................ Download: 5.85 Mbit/s Testing upload speed...................................................................................................... Upload: 2.02 Mbit/s . RPi4 -Pilot - HL8548 - Three PAYG - manual connection . Flat antenna Connection via AT+XCEDATA=1,0 3G DOWN 2.55 Mbps UP 1.61 Mbps . With cli . Testing from Three (92.40.45.114)... Retrieving speedtest.net server list... Selecting best server based on ping... Hosted by Redraw Internet (London) [2.56 km]: 68.998 ms Testing download speed................................................................................ Download: 5.53 Mbit/s Testing upload speed...................................................................................................... Upload: 2.05 Mbit/s .",
    "url": "http://localhost:4000/docs/speedtests/README.html",
    "relUrl": "/docs/speedtests/README.html"
  }
  ,"2": {
    "title": "PiloT Power Control Scripts",
    "content": "The real repository folder contains shell script files which enable the RPi to control the power state of the PiloT board .",
    "url": "http://localhost:4000/scripts_pilotControl/",
    "relUrl": "/scripts_pilotControl/"
  }
  ,"3": {
    "title": "Automation - IP link check",
    "content": "Purpose . Automates IP link availablity - reboots the PiloT if the IP link fails. By testing wwan0 network connection provided by the Pilot board using ICMP ping Restarts the wwan0 network connection on ping failure The current version is experimental - seems to work but is very basic - maybe view this as a starting point to develop a better solution . Quick start . pip install python-crontab . This assumes the Pilot project was installed in the pi@raspberrypi: home folder - the code currently has hardcoded paths . Add the cron custom job . python cronJobAdd.py . After this [checkIp.py] should execute every minute . Notes . consumes data due to ICMP transactions | targets only wwan0 | runs even when another interface has priority | hardcode paths | sends ping via wwan0 every minute | hardcoded ping server address | hardcoded tested interface | hardcoded ping rate | Source . https://stackabuse.com/scheduling-jobs-with-python-crontab/ . Further stuff . list all the jobs from the command line . crontab -l . Remove all cron jobs . python cronJobRemove.py .",
    "url": "http://localhost:4000/scripts_python_checkIp/README.html",
    "relUrl": "/scripts_python_checkIp/README.html"
  }
  ,"4": {
    "title": "Pilot images",
    "content": "Pilot images . Are stored in this folder .",
    "url": "http://localhost:4000/images/README.html",
    "relUrl": "/images/README.html"
  }
  ,"5": {
    "title": "Shell example - read connection settings",
    "content": "How to read a connections settings . In an RPi shell Remember to use your own connection.id . nmcli c show &#39;3 Internet&#39; . Response . connection.id: 3 Internet connection.uuid: c7a7a320-b996-4bfe-8ae9-8c776bb89126 connection.stable-id: -- connection.type: gsm connection.interface-name: -- connection.autoconnect: no connection.autoconnect-priority: 0 connection.autoconnect-retries: -1 (default) connection.multi-connect: 0 (default) connection.auth-retries: -1 connection.timestamp: 1565360426 connection.read-only: no connection.permissions: user:pi connection.zone: -- connection.master: -- connection.slave-type: -- connection.autoconnect-slaves: -1 (default) connection.secondaries: -- connection.gateway-ping-timeout: 0 connection.metered: unknown connection.lldp: default connection.mdns: -1 (default) connection.llmnr: -1 (default) ipv4.method: auto ipv4.dns: -- ipv4.dns-search: -- ipv4.dns-options: &quot;&quot; ipv4.dns-priority: 0 ipv4.addresses: -- ipv4.gateway: -- ipv4.routes: -- ipv4.route-metric: -1 ipv4.route-table: 0 (unspec) ipv4.ignore-auto-routes: no ipv4.ignore-auto-dns: no ipv4.dhcp-client-id: -- ipv4.dhcp-timeout: 0 (default) ipv4.dhcp-send-hostname: yes ipv4.dhcp-hostname: -- ipv4.dhcp-fqdn: -- ipv4.never-default: no ipv4.may-fail: yes ipv4.dad-timeout: -1 (default) ipv6.method: auto ipv6.dns: -- ipv6.dns-search: -- ipv6.dns-options: &quot;&quot; ipv6.dns-priority: 0 ipv6.addresses: -- ipv6.gateway: -- ipv6.routes: -- ipv6.route-metric: -1 ipv6.route-table: 0 (unspec) ipv6.ignore-auto-routes: no ipv6.ignore-auto-dns: no ipv6.never-default: no ipv6.may-fail: yes ipv6.ip6-privacy: -1 (unknown) ipv6.addr-gen-mode: stable-privacy ipv6.dhcp-duid: -- ipv6.dhcp-send-hostname: yes ipv6.dhcp-hostname: -- ipv6.token: -- gsm.number: *99# gsm.username: -- gsm.password: &lt;hidden&gt; gsm.password-flags: 1 (agent-owned) gsm.apn: 3internet gsm.network-id: -- gsm.pin: &lt;hidden&gt; gsm.pin-flags: 0 (none) gsm.home-only: no gsm.device-id: -- gsm.sim-id: -- gsm.sim-operator-id: -- gsm.mtu: auto proxy.method: none proxy.browser-only: no proxy.pac-url: -- proxy.pac-script: -- .",
    "url": "http://localhost:4000/docs/networkManagerDocs/exampleNmcliConnectShow.html",
    "relUrl": "/docs/networkManagerDocs/exampleNmcliConnectShow.html"
  }
  ,"6": {
    "title": "Pilot GIT repo",
    "content": "Github . Make a Local Copy of the Repo . Copies the latest version of this project that resides on the github system to a local machine . git clone http://github.com/johnofleek/Pilot . Upload local copy to Github . Only useful to developers . git add . git commit -m &quot;add HL8548&quot; git push -u origin master .",
    "url": "http://localhost:4000/docs/networkManagerDocs/git.html",
    "relUrl": "/docs/networkManagerDocs/git.html"
  }
  ,"7": {
    "title": "Pilot",
    "content": ". Summary | Technical information links | Compatibility | Summary . The PiloT is a Raspberry Pi (RPi) HAT compliant board which provides cellular connectivity, some variants also have GNSS location capability. . The PiloT power state is controlled via the Rpi GPIO and the Pilot is powered via the RPi 40 pin header. . Control and data communications between the PiloT with the RPi is via USB or the RPi physical serial port. Note that some RPi variants use the physical serial port to communicate with the RPi on board WiFi / Bluetooth systems . Technical information links . Click Network manager documentation for information on an alternative method of automating PiloT cellular IP connectivity. Network manager also provide an developers with API’s for networking control, cellular SMS and general radio information . Click Shell Scripts for example scripts that power up and down the PiloT HAT . Click IP link check automation for a demo project which adds IP ping link checking to the RPi . Click Speed tests for records of practical network speed testing . Compatibility . Raspberry Pi 4 Model B Raspberry Pi 3 Model B+ Raspberry Pi 3 Model B Raspberry Pi 2 Model B Raspberry Pi Zero W Raspberry Pi Zero . .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"8": {
    "title": "EM7455",
    "content": "EM Board . The following information targets the uPilot board . AT Config . For more details take a look at the AT command manual available on the_source . NetworkManager / ModemManager occupies and transacts on the Modem/AT serial interfaces so it is recommended to stop their processes before sending AT commands to the modem . Unlock . AT!entercnd=&quot;A710&quot; . Check modem type and firmware rev . ati9 Manufacturer: Sierra Wireless, Incorporated Model: EM7455 Revision: SWI9X30C_02.24.05.06 r7040 CARMD-EV-FRMWR2 2017/05/19 0 . USB composition settings . AT!usbcomp=? !USBCOMP: AT!USBCOMP=&lt;Config Index&gt;,&lt;Config Type&gt;,&lt;Interface bitmask&gt; &lt;Config Index&gt; - configuration index to which AT!usbcomp? Config Index: 1 Config Type: 1 (Generic) Interface bitmask: 0000050D (diag,nmea,modem,rmnet0,rmnet1) . Enable just MBIM . AT!usbcomp=1,1,0000100D . Others - untested . EM75xx series: AT!ENTERCND=&quot;A710&quot; AT#USBCOMP=1,3,100D AT!RESET .",
    "url": "http://localhost:4000/docs/networkManagerDocs/instructions_EM7455.html",
    "relUrl": "/docs/networkManagerDocs/instructions_EM7455.html"
  }
  ,"9": {
    "title": "HL7692",
    "content": "HL7692 Pilot . The aim is to configure the Raspberry Pi Raspian OS and the HL7692 to use the USB MBIM protocol to enable cellular communications between the Raspberry PI and the HL7692 . HL7692 module AT command configuration . With network manager and associated helpers disabled it is possible to manually command / configure the HL7692 via it’s USB serial port . With network manager manger running it’s better to use the physical UART connection between the RPi and the Pilot / HL7692. This works ok on the RPi’s that don’t have WiFi or the RPi4. . To access the HL7692 USB serial port command interface use a serial terminal tool like minicom . $ sudo minicom -D /dev/ttyACM0 . To access the physical serial port use something like this (look on line on how to enable the physical serial port) - this was used on the RPi4 . $ sudo minicom -b 115200 -D /dev/ttyS0 . LEDs . Note that the LED port configuration is erased if the modem firmware is updated . The Pilot board recommended settings are as follows - the modem should be preconfigured like this when the Pilot board is new . LED D6 . Set LED D6 as cellular network status indicator with the following command . at+ksync=2,7 . With this setting the LED D6 behaviour is as follows . LED PERMANENTLY OFF: Not registered / Initialization / Registration denied / no SIM card | LED 600 ms ON / 600ms OFF: Not registered but searching | LED 75 ms ON / 3s OFF: connected to the network | LED D5 . Set LED D5 as the cellular Pilot module boot and power indicator . at+kgpio=8,1 . With this setting the LED D5 behaviour is as follows . If the modem is off then the LED will be OFF | Following modem powered off - if a power on signal is applied to the Pilot module the LED should momentarily flash on | Then the LED will be OFF | After the modem has booted the LED should be ON | HL7692 USB port composition . Currently network manager manages the HL7692 network interface via MBIM if the HL7692 is reconfigured to USB composition 2 which gives 1 MBIM and 1 USB port. This a change from the modules default setting . Note that at the time of writing (August 2019) the Sierra AT command guide indicated that three USB serial ports will be made available. But this wasn’t the case with FW RHL769x.2.26 and RHL769x.2.27 one MBIM and one serial AT port is available . Configure the composition to enable and MBIM interface . AT+KUSBCOMP=2 . Check the composition . AT+KUSBCOMP? +KUSBCOMP: 2 . HL7692 and power on signal . We recommend using the power ON / OFF scripts to ensure correct state of modem operation . this will override the RPi’s GPIO default state which may not be a stable signal state | . RPi HL7692 power up state . RPi3B+ | Default GPIO state causes Pilot to power up | . RPi4 | Default GPIO state causes Pilot to be powered down | . Debugging notes . Using the physical serial port between the Pi and Pilot can be useful during debug as the single USB serial port is managed by networkManager. If only the USB serial port is available stopping networkManager may be useful . Check radio access technology . AT+KSRAT? 9 == LTE first then GSM 5 == LTE Only . AT+CGDCONT= 1,&quot;IPV4V6&quot;,&quot;payandgo.o2.co.uk&quot;,,, . Windows . I also tested the HL7692 Pilot on a Windows 10 machine . On the windows machine to get the HL7692 to work I had to . Lock the modem to LTE - AT+KSRAT=5 | Manually set the apn, username and password using the windows cellular GUI | Manually configure the modems context 1 by using AT command AT+CGDCONT = 1,”IP”,”payandgo.o2.co.uk”,,, | . Debugging aids . Using . nmcli monitor . Successful connection OP capture . O2 Pay and Go (Prepaid): connection profile changed cdc-wdm0: using connection &#39;O2 Pay and Go (Prepaid)&#39; cdc-wdm0: connecting (prepare) Networkmanager is now in the &#39;connecting&#39; state cdc-wdm0: connecting (need authentication) cdc-wdm0: connecting (prepare) cdc-wdm0: connecting (configuring) cdc-wdm0: connecting (getting IP configuration) cdc-wdm0: connecting (checking IP connectivity) cdc-wdm0: connecting (starting secondary connections) cdc-wdm0: connected Networkmanager is now in the &#39;connected (local only)&#39; state Networkmanager is now in the &#39;connected (site only)&#39; state &#39;O2 Pay and Go (Prepaid)&#39; is now the primary connection Networkmanager is now in the &#39;connected&#39; state Connectivity is now &#39;full&#39; .",
    "url": "http://localhost:4000/docs/networkManagerDocs/instructions_HL7692.html",
    "relUrl": "/docs/networkManagerDocs/instructions_HL7692.html"
  }
  ,"10": {
    "title": "HL8548",
    "content": "HL8548 Pilot . Configuration interface . Minicom terminal to HL USB serial port . $ sudo minicom -D /dev/ttyACM3 . Change factory default from 0 to 2 . AT+KUSBCOMP=2 . This gives 5 CDC-ACM serial ports and 1x CDC-ECM Network adapter . LEDs . Note that the LED port configuration is erased if the modem firmware is updated . The Pilot board recommended settings are as follows - the modem should be preconfigured like this when the Pilot board is new . LED D6 . Set LED D6 as cellular network status indicator with the following command . at+ksync=2,7 . With this setting the LED D6 behaviour is as follows . LED PERMANENTLY OFF: Not registered / Initialization / Registration denied / no SIM card | LED 600 ms ON / 600ms OFF: Not registered but searching | LED 75 ms ON / 3s OFF: connected to the network | LED D5 . Set LED D5 as the cellular Pilot module boot and power indicator . at+kgpio=8,1 . With this setting the LED D5 behaviour is as follows . If the modem is off then the LED will be OFF | Following modem powered off - if a power on signal is applied to the Pilot module the LED should momentarily flash on | Then the LED will be OFF | After the modem has booted the LED should be ON | HL8548 and power on signal . Recommend using the power ON / OFF scripts to ensure correct state of modem operation - this will overide the RPi’s GPIO default state which may not be a stable signal. . Debug . $ lsusb ... Bus 001 Device 010: ID 1519:0303 Comneon ... .",
    "url": "http://localhost:4000/docs/networkManagerDocs/instructions_HL8548.html",
    "relUrl": "/docs/networkManagerDocs/instructions_HL8548.html"
  }
  ,"11": {
    "title": "Further notes 2",
    "content": "Network manager and general notes . Network manager and general notes | Use of raspbian built in wiringPi RPi4 – update the wiringPi app | NetworkManager NetworkManager - configuration | NetworkManager - autoconnect | NetworkManager - configure autoconnect using nmcli | Network manager - configure via GUI | Configure manually via the file system | Stop network manager** | Restart network manager | | Further network manager notes | Debug stuff | Use of raspbian built in wiringPi RPi4 – update the wiringPi app . At the time of writing (August 2019) the builtin wiringPi app doesn’t work on the RPi4 This is a workaround from wiringpi.com . To upgrade: . cd /tmp wget https://project-downloads.drogon.net/wiringpi-latest.deb sudo dpkg -i wiringpi-latest.deb . Check with: . gpio -v . NetworkManager . NetworkManager is a linux daemon - from the manual . The NetworkManager daemon attempts to make networking configuration and operation as painless and automatic as possible by managing the primary network connection and other network interfaces, like Ethernet, Wi-Fi, and Mobile Broadband devices. NetworkManager will connect any network device when a connection for that device becomes available, unless that behavior is disabled. Information about networking is exported via a D-Bus interface to any interested application, providing a rich API with which to inspect and control network settings and operation. . Use Linux network manager to provide automatation of the Pilot cellular modules IP interface bringup in Linux . For more info . Documentation on network Manager . Documentation on network manager cellular command line configuration . NetworkManager - configuration . NetworkManager can be configured in a few different ways . GUI | nmcli | nmtui | direct data file edit | API | . Note that the graphical interface has a database of general cellular networks. To configure network manager manually use nmcli or manually edit the files on the RPi system - for example to change the APN / add PAP / CHAP / USER / PASSWORD … . NetworkManager - autoconnect . The network interface can be set to autoconnect when the cellular module is on - if the connection configuration has setting . autoconnect=true . NetworkManager - configure autoconnect using nmcli . Make the change - example . pi@raspberrypi:~ $ sudo nmcli c modify &#39;3 Internet&#39; connection.autoconnect yes . Check the result . pi@raspberrypi:~ $ nmcli c show &#39;3 Internet&#39; | grep connection.auto connection.autoconnect: yes connection.autoconnect-priority: 0 connection.autoconnect-retries: -1 (default) connection.autoconnect-slaves: -1 (default) . To list nmcli settings “show” see . Network manager - configure via GUI . Right click on the tray icon - “edit - connections” . Configure manually via the file system . Configuration settings are actually stored in the file system e.g. . root@raspberrypi:/etc/NetworkManager# ls system-connections &#39;3 Internet.nmconnection&#39; . For an example see . sudo service network-manager restart . Stop network manager** . sudo /etc/init.d/network-manager stop . Restart network manager . After editing settings - the network manager daemon needs to be restarted for the changes to take effect . sudo service network-manager restart . Further network manager notes . With dhcpcd disabled - network manager manages all of the RPi networking interfaces e.g. Ethernet, WiFi, Cellular … | With dhcpcd uninstalled but the GUI is not - it’s GUI is still visible in the Raspbian Task bar it reports “Connection to dhcpcd lost” the functionality of this GUI is replaced by the NetworkManager Applet icon | The command line tool nmtui doesn’t appear to be able to edit cellular device configuration | . Debug stuff . Debug modemManager see . Have a look at the syslog . sudo tail -f /var/log/syslog . Have a look at running processes . ps -U0 -o &#39;tty,pid,comm&#39; | grep ^? .",
    "url": "http://localhost:4000/docs/networkManagerDocs/instructions_NetworkManagerMore.html",
    "relUrl": "/docs/networkManagerDocs/instructions_NetworkManagerMore.html"
  }
  ,"12": {
    "title": "Pilot Configuration",
    "content": "Pilot modem configuration notes . For documentation specific to the modem fitted to your Pilot - such as . Modem Configuration | Expected LED behaviour | Network specific information | . Click the link below that matches the modem fitted to your Pilot HAT If you don’t know the modem type try sending AT command ATi9 to the modem via a command serial port . EM7455 4G/3G - supports MBIM | HL7692 4G/2G - supports MBIM | HL8548 3G/2G - PPP - possibly better to not use network manager | .",
    "url": "http://localhost:4000/docs/networkManagerDocs/instructions_modemConfiguration.html",
    "relUrl": "/docs/networkManagerDocs/instructions_modemConfiguration.html"
  }
  ,"13": {
    "title": "Further notes 1",
    "content": "Summary . Use Linux network manager to provide automatation of the Pilot cellular modules IP interface bringup in Linux . Summary | External documentation sources | Connection start | To Configure and Play Configure to autoconnect using nmcli | Configure via Gui | Configure manually via the file system | | Tested records | Debug stuff | External documentation sources . Documentation on network Manager . Documentation on network manager cellular command line configuration . Connection start . If the connection configuration has setting . autoconnect=true . Then the module just needs to be turned on with pilotOn.sh for NetworkManager to automatically connect the PiloT to wwanX . To Configure and Play . Either via the graphical interface or using the command line nmcli and nmtui . Note that the graphical interface has a database of general cellular networks. But to configure manually use nmcli or manually edit the files on the RPi system - for example to change the APN / add PAP / CHAP / USER / PASSWORD … . Note that the interface can be set to auto connect . Configure to autoconnect using nmcli . Make the change . pi@raspberrypi:~ $ sudo nmcli c modify &#39;3 Internet&#39; connection.autoconnect yes . Check the result . pi@raspberrypi:~ $ nmcli c show &#39;3 Internet&#39; | grep connection.auto connection.autoconnect: yes connection.autoconnect-priority: 0 connection.autoconnect-retries: -1 (default) connection.autoconnect-slaves: -1 (default) . To list nmcli settings “show” see . Configure via Gui . Right click on the tray icon - “edit - connections” . Configure manually via the file system . Configuration settings are actually stored in the file system e.g. . root@raspberrypi:/etc/NetworkManager# ls system-connections &#39;3 Internet.nmconnection&#39; . For an example see . sudo service network-manager restart . Tested records . Testing details . Debug stuff . Have a look at the syslog . sudo tail -f /var/log/syslog . Stop network manager . sudo /etc/init.d/network-manager stop . ** restart network manager After editing settings - this needs to be done . sudo service network-manager restart . even better see . Have a look at running processes . ps -U0 -o &#39;tty,pid,comm&#39; | grep ^? .",
    "url": "http://localhost:4000/docs/networkManagerDocs/instructions_networkManager.html",
    "relUrl": "/docs/networkManagerDocs/instructions_networkManager.html"
  }
  ,"14": {
    "title": "Network Manager",
    "content": "Network manager . Quickstart Guide | SIM Information | PiloT Testing Information | More notes | Modem manager | This section explores the use of network manager in combination with the RPi Rasbian OS and the USB interface of the Pilot cellular HAT board. . Network manager can replace the functionality provided by dhcpcd which is installed by default in the current versions (2019) of Raspbian. Network manager has the advantage that it is able to automate the management of many cellular modems as well as managing the usual WiFi and Ethernet network interfaces . For a quick overview of network manager take a look at wikipedia. Network manager has multiple interfaces - graphical, command line and an API. Network manager uses another component called modem manager. Modem manager also has GUI, CLI and API interfaces. . Please be aware that network manager can only manage and check the modems network connectivity, it cannot test if a network connection will support IP traffic. To test that the network connection can transport IP traffic an additional application is needed to perform a link test. For example - in routers the link test function is typically implemented in a separate app that sends / receives periodic ping requests . Quickstart Guide . Click the heading for a quick start guide . Note that during the quick start installation process the Raspbian default method dhcpcd is uninstalled and replaced by network-manager and the network manager GUI is installed as a replacement for the dhcpcd GUI . SIM Information . Click the heading for information on our experiments configuring network manager cellular profiles for different cellular operators SIMs . PiloT Testing Information . Click the heading for information on Pilot / Raspbian / RPi combinations that have been tried . More notes . The method described in the quick start is experimental and has only been tested on a limited set of RPi’s, Rasbian OS variants and PiloT variants . Cellular modems which support the following connectivity methods over USB have been tried . MBIM | PPP | . For Even more notes . Modem manager . When Network manager is installed modem manager is also installed. A command line interface for modemManager is available - mmcli. It is also possible to install a GUI. For example . $ sudo apt-get install modem-manager-gui . Modem manager can be used for diagnostics and also enables SMS interaction .",
    "url": "http://localhost:4000/docs/networkManagerDocs/networkManagerIndex.html",
    "relUrl": "/docs/networkManagerDocs/networkManagerIndex.html"
  }
  ,"15": {
    "title": "SIM Practical Testing",
    "content": "Network manager GUI V cellular SIM examples . We’ll add to the examples as and when we test SIMs So far the following have worked ok . PAYG EE | PAYG O2 | PAYG Vodafone | PAYG Three | . O2 PAYG SIM . Many networks appear to work without PAP or CHAP authentication. O2 requires PAP authentication - we tested using a PAYG SIM . On O2 the network seemed to prefer a connection to 2G edge - to workaround this during testing we locked the modem to 4g / LTE only . Configuring NetworkManager . Lock the modem to 4G / LTE by using AT command AT+KSRAT=5 | Manually configure the modems context 1 using AT command AT+CGDCONT = 1,”IP”,”payandgo.o2.co.uk”,,, We think this may be necessary because network manager losses track of the of the modems AT+CGDCONT setting but this could be incorrect | Use the NetworkManager Applet (GUI) to configure network manager | . The following is an example of using the NetworkManager Applet to configure an O2 connection . Note that APN and Number are blank and that only PAP authentication is selected . . . Note that the PPP setting is picked up by network manager and used via the MBIM interface not an actual PPP session . Read back settings via the networkmanager CLI . Vodafone PAYG . Notes from using a new PAYG SIM . When purchased the SIM is not activated on the network | To activate the SIM add credit | After activation the SIM will enable cellular devices to connect on 3G / 2G | The HL7692 does not support 3G - to work around this we enabled 2G on the HL7692 | To enable 4G the following steps were carried out. Added a £10 big bundle | Created a Vodafone online account | Added the SIM phone number to the online account | | Then set up via NetworkManager Applet as per O2 above. . Note that after initial configuration clearing the apn setting from the NetworkManager Applet (right click -&gt; edit connections) appears to be necessary for normal operation of NetworkManager . Value Setting . apn | pp.vodafone.co.uk | . username | wap | . password | wap | . Authentication | PAP | . It’s possible that NetworkManager Applet silently fails to set the modules apn - if NetworkManager fails to connect check the modems setting by using serial AT command . AT+CGDCONT? . to check the modules internal apn setting - if it’s not correct use something like the following to correct it . AT+CGDCONT = 1,&quot;IP&quot;,&quot;pp.vodafone.co.uk&quot;,,, AT+CGDCONT = 2,&quot;IP&quot;,&quot;pp.vodafone.co.uk&quot;,,, .",
    "url": "http://localhost:4000/docs/networkManagerDocs/simUse_info.html",
    "relUrl": "/docs/networkManagerDocs/simUse_info.html"
  }
  ,"16": {
    "title": "Pilot Module Test Records",
    "content": "Test records . Pilot board with Raspberry Pi and Raspian OS - a record of what was tested . Test records | HL7692 | HL8548 | EM7455 | HL7692 . What Info . Module | HL7692 | . [Y] | Working Connection | . [Y] | Via MBIM | . Raspberry | RPi4 , RPi3B+ | . OS | Buster | . OS Version (uname -a) | Linux raspberrypi 4.19.58-v7l+ #1245 SMP Fri Jul 12 17:31:45 BST 2019 armv7l GNU/Linux | . Module Firmware | RHL769x.2.26.180400.201802141030.x7120m_1 2018-02-14 12:02:13 r12309 | . Module Firmware | RHL769x.2.27.183100.201809071813.x7120m_3 | . Module Config Serial Port | /dev/ttyACM0 | . Module Config | Set to MBIM mode | . — | AT+KUSBCOMP=2 | . NetworkManager Applet Version | 1.8.20 | . nmcli tool | version 1.14.6 | . dpkg -s network-manager | grep ‘^Version:’ | Version: 1.14.6-2 | . Notes | Modem MBIM didn’t function correctly with earlier FW version | . Notes | Speed test ~9Mbps down 4.2Mbps up | . Notes | UK SIMs Tested - EE PAYG, Three PAYG, 02 PAYG, Vodafone PAYG | . . HL8548 . What Info . Module | HL8548 | . [Y] | Working Connection | . [N] | Via MBIM | . Raspberry | RPi4 | . OS | Buster | . OS Version (uname -a) | Linux raspberrypi 4.19.58-v7l+ #1245 SMP Fri Jul 12 17:31:45 BST 2019 armv7l GNU/Linux | . Module Firmware |   | . Module Config Serial Port | /dev/ttyACM0 | . Module Config | Set to CDC-ECM mode | . — | AT+KUSBCOMP=2 | . nmcli tool | version 1.14.6 | . NetworkManager Applet Version | 1.8.20 | . dpkg -s network-manager | grep ‘^Version:’ | Version: 1.14.6-2 | . Notes | Network manager doesn’t try to connect the CDC-ECM port | . Notes | Network manager will connect using PPP over CDC-ACM4 | . Notes | dhcpcd does still manage CDC_ECM when AT+XCEDATA=2,0 is used | . . EM7455 . What Info . Module | EM7455 | . [Y] | Working Connection | . [Y] | Via MBIM | . [Y] | some speed testing | . Raspberry | RPi4 | . OS | Buster | . OS Version (uname -a) | Linux raspberrypi 4.19.58-v7l+ #1245 SMP Fri Jul 12 17:31:45 BST 2019 armv7l GNU/Linux | . Module Firmware | Revision: SWI9X30C_02.32.11.00 r8042 CARMD-EV-FRMWR2 2019/05/15 21:52:20 | . Module Config Serial Port | sudo minicom -D /dev/ttyUSB2 | . Module Config | Set to MBIM mode | . — | at!usbcomp? | . — | Config Index: 1 | . — | Config Type: 1 (Generic) | . — | Interface bitmask: 0000100D (diag,nmea,modem,mbim) | . NetworkManager Applet Version | 1.8.20 | . nmcli tool | version 1.14.6 | . dpkg -s network-manager | grep ‘^Version:’ | Version: 1.14.6-2 | . Notes | Network manager made connection first time using MBIM cdc-wdm0 | . Notes | Speed test ~39Mbps down 29Mbps up – at+cops? +cops: 0,0,”3”,7 | . Notes | UK SIMs Tested - EE PAYG, Three PAYG, 02 PAYG, Vodafone PAYG | . . What Info . Module | EM7455 | . [N] | Working Connection | . [N] | Via MBIM | . Raspberry | RPi4 | . OS | Buster | . OS Version (uname -a) | Linux raspberrypi 4.19.58-v7l+ #1245 SMP Fri Jul 12 17:31:45 BST 2019 armv7l GNU/Linux | . Module Firmware | SWI9X30C_02.24.05.06 r7040 CARMD-EV-FRMWR2 2017/05/19 0 | . Module Config Serial Port | sudo minicom -D /dev/ttyUSB2 | . Module Config | Set to MBIM mode | . — | at!usbcomp? | . — | Config Index: 1 | . — | Config Type: 1 (Generic) | . — | Interface bitmask: 0000100D (diag,nmea,modem,mbim) | . NetworkManager Applet Version | 1.8.20 | . nmcli tool | version 1.14.6 | . dpkg -s network-manager | grep ‘^Version:’ | Version: 1.14.6-2 | . Notes | Network manager unable to set up a connection an attempt is made | . .",
    "url": "http://localhost:4000/docs/networkManagerDocs/test_configurationRecords.html",
    "relUrl": "/docs/networkManagerDocs/test_configurationRecords.html"
  }
  ,"17": {
    "title": "",
    "content": "Disconnect . pi@raspberrypi:~ $ sudo tail -f /var/log/syslog Aug 12 14:38:22 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617102.6322] manager: NetworkManager state is now CONNECTED_GLOBAL Aug 12 14:38:22 raspberrypi systemd[1]: Starting Network Manager Script Dispatcher Service... Aug 12 14:38:22 raspberrypi dbus-daemon[391]: [system] Successfully activated service &#39;org.freedesktop.nm_dispatcher&#39; Aug 12 14:38:22 raspberrypi systemd[1]: Started Network Manager Script Dispatcher Service. Aug 12 14:38:22 raspberrypi nm-dispatcher: req:1 &#39;up&#39; [ppp0]: new request (1 scripts) Aug 12 14:38:22 raspberrypi nm-dispatcher: req:1 &#39;up&#39; [ppp0]: start running ordered scripts... Aug 12 14:38:22 raspberrypi nm-dispatcher: req:2 &#39;connectivity-change&#39;: new request (1 scripts) Aug 12 14:38:23 raspberrypi nm-dispatcher: req:2 &#39;connectivity-change&#39;: start running ordered scripts... Aug 12 14:38:33 raspberrypi systemd[1]: NetworkManager-dispatcher.service: Succeeded. Aug 12 14:38:54 raspberrypi systemd-timesyncd[375]: Synchronized to time server for the first time 188.114.116.1:123 (0.debian.pool.ntp.org). Aug 12 14:43:39 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617419.0795] device (ttyACM4): state change: activated -&gt; deactivating (reason &#39;user-requested&#39;, sys-iface-state: &#39;managed&#39;) Aug 12 14:43:39 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617419.0813] manager: NetworkManager state is now DISCONNECTING Aug 12 14:43:39 raspberrypi dbus-daemon[391]: [system] Activating via systemd: service name=&#39;org.freedesktop.nm_dispatcher&#39; unit=&#39;dbus-org.freedesktop.nm-dispatcher.service&#39; requested by &#39;:1.8&#39; (uid=0 pid=394 comm=&quot;/usr/sbin/NetworkManager --no-daemon &quot;) Aug 12 14:43:39 raspberrypi systemd[1]: Starting Network Manager Script Dispatcher Service... Aug 12 14:43:39 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617419.1247] audit: op=&quot;device-disconnect&quot; interface=&quot;ppp0&quot; ifindex=11 pid=761 uid=1000 result=&quot;success&quot; Aug 12 14:43:39 raspberrypi NetworkManager[394]: Terminating on signal 15 Aug 12 14:43:39 raspberrypi pppd[2972]: Terminating on signal 15 Aug 12 14:43:39 raspberrypi pppd[2972]: nm-ppp-plugin: (nm_phasechange): status 10 / phase &#39;terminate&#39; Aug 12 14:43:39 raspberrypi pppd[2972]: nm-ppp-plugin: (nm_phasechange): status 8 / phase &#39;network&#39; Aug 12 14:43:39 raspberrypi ModemManager[403]: &lt;info&gt; Modem /org/freedesktop/ModemManager1/Modem/3: state changed (connected -&gt; disconnecting) Aug 12 14:43:39 raspberrypi pppd[2972]: Connect time 5.3 minutes. Aug 12 14:43:39 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617419.1361] modem[&quot;ttyACM4&quot;]: modem state changed, &#39;connected&#39; --&gt; &#39;disconnecting&#39; (reason: user-requested) Aug 12 14:43:39 raspberrypi NetworkManager[394]: Connect time 5.3 minutes. Aug 12 14:43:39 raspberrypi NetworkManager[394]: Sent 4953 bytes, received 2709 bytes. Aug 12 14:43:39 raspberrypi pppd[2972]: Sent 4953 bytes, received 2709 bytes. Aug 12 14:43:39 raspberrypi pppd[2972]: nm-ppp-plugin: (nm_phasechange): status 5 / phase &#39;establish&#39; Aug 12 14:43:39 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617419.1424] device (ppp0): state change: disconnected -&gt; unmanaged (reason &#39;connection-assumed&#39;, sys-iface-state: &#39;external&#39;) Aug 12 14:43:39 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617419.1511] dns-mgr: Removing DNS information from /sbin/resolvconf Aug 12 14:43:39 raspberrypi dbus-daemon[391]: [system] Successfully activated service &#39;org.freedesktop.nm_dispatcher&#39; Aug 12 14:43:39 raspberrypi systemd[1]: Started Network Manager Script Dispatcher Service. Aug 12 14:43:39 raspberrypi nm-dispatcher: req:1 &#39;connectivity-change&#39;: new request (1 scripts) Aug 12 14:43:39 raspberrypi nm-dispatcher: req:1 &#39;connectivity-change&#39;: start running ordered scripts... Aug 12 14:43:39 raspberrypi pppd[2972]: Modem hangup Aug 12 14:43:39 raspberrypi NetworkManager[394]: Modem hangup Aug 12 14:43:39 raspberrypi NetworkManager[394]: Connection terminated. Aug 12 14:43:39 raspberrypi pppd[2972]: nm-ppp-plugin: (nm_phasechange): status 11 / phase &#39;disconnect&#39; Aug 12 14:43:39 raspberrypi pppd[2972]: Connection terminated. Aug 12 14:43:40 raspberrypi ModemManager[403]: &lt;info&gt; mobile equipment request to deactivate context (type IP, address 0.0.0.0, cid 2) Aug 12 14:43:40 raspberrypi ModemManager[403]: &lt;info&gt; Bearer /org/freedesktop/ModemManager1/Bearer/4: explicitly disconnected Aug 12 14:43:40 raspberrypi ModemManager[403]: &lt;warn&gt; (ttyACM4): could not re-acquire serial port lock: (5) Input/output error Aug 12 14:43:40 raspberrypi ModemManager[403]: &lt;info&gt; Modem /org/freedesktop/ModemManager1/Modem/3: state changed (disconnecting -&gt; registered) Aug 12 14:43:40 raspberrypi ModemManager[403]: &lt;info&gt; mobile equipment request to deactivate context (type IP, address 0.0.0.0, cid 2) Aug 12 14:43:40 raspberrypi NetworkManager[394]: Too few arguments. Aug 12 14:43:40 raspberrypi NetworkManager[394]: Too few arguments. Aug 12 14:43:40 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617420.2522] modem[&quot;ttyACM4&quot;]: modem state changed, &#39;disconnecting&#39; --&gt; &#39;registered&#39; (reason: user-requested) Aug 12 14:43:40 raspberrypi pppd[2972]: nm-ppp-plugin: (nm_phasechange): status 1 / phase &#39;dead&#39; Aug 12 14:43:40 raspberrypi pppd[2972]: nm-ppp-plugin: (nm_exit_notify): cleaning up Aug 12 14:43:40 raspberrypi pppd[2972]: Exit. Aug 12 14:43:41 raspberrypi ModemManager[403]: &lt;info&gt; mobile equipment request to deactivate context (type IP, address 0.0.0.0, cid 2) Aug 12 14:43:41 raspberrypi ModemManager[403]: &lt;info&gt; mobile equipment request to deactivate context (type IP, address 0.0.0.0, cid 2) Aug 12 14:43:42 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617422.1125] device (ttyACM4): state change: deactivating -&gt; disconnected (reason &#39;user-requested&#39;, sys-iface-state: &#39;managed&#39;) Aug 12 14:43:42 raspberrypi NetworkManager[394]: &lt;info&gt; [1565617422.1230] manager: NetworkManager state is now DISCONNECTED Aug 12 14:43:42 raspberrypi nm-dispatcher: req:2 &#39;down&#39; [ttyACM4]: new request (1 scripts) Aug 12 14:43:42 raspberrypi nm-dispatcher: req:2 &#39;down&#39; [ttyACM4]: start running ordered scripts... Aug 12 14:43:52 raspberrypi systemd[1]: NetworkManager-dispatcher.service: Succeeded. Aug 12 14:44:09 raspberrypi dbus-daemon[663]: [session uid=1000 pid=663] Activating via systemd: service name=&#39;org.gtk.vfs.Metadata&#39; unit=&#39;gvfs-metadata.service&#39; requested by &#39;:1.8&#39; (uid=1000 pid=741 comm=&quot;pcmanfm --desktop --profile LXDE-pi &quot;) Aug 12 14:44:09 raspberrypi systemd[625]: Starting Virtual filesystem metadata service... Aug 12 14:44:09 raspberrypi dbus-daemon[663]: [session uid=1000 pid=663] Successfully activated service &#39;org.gtk.vfs.Metadata&#39; Aug 12 14:44:09 raspberrypi systemd[625]: Started Virtual filesystem metadata service. . connect . pi@raspberrypi:~ $ sudo tail -f /var/log/syslog . Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.1554] device (ttyACM4): Activation: starting connection &#39;3 Internet&#39; (f23612eb-7b35-4524-9e3d-67bc86003e04) Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.1576] audit: op=&quot;connection-activate&quot; uuid=&quot;f23612eb-7b35-4524-9e3d-67bc86003e04&quot; name=&quot;3 Internet&quot; pid=761 uid=1000 result=&quot;success&quot; Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.1594] device (ttyACM4): state change: disconnected -&gt; prepare (reason &#39;none&#39;, sys-iface-state: &#39;managed&#39;) Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.1658] manager: NetworkManager state is now CONNECTING Aug 12 14:55:58 raspberrypi ModemManager[403]: &lt;info&gt; Simple connect started... Aug 12 14:55:58 raspberrypi ModemManager[403]: &lt;info&gt; Simple connect state (4/8): Wait to get fully enabled Aug 12 14:55:58 raspberrypi ModemManager[403]: &lt;info&gt; Simple connect state (5/8): Register Aug 12 14:55:58 raspberrypi ModemManager[403]: &lt;info&gt; Simple connect state (6/8): Bearer Aug 12 14:55:58 raspberrypi ModemManager[403]: &lt;info&gt; Simple connect state (7/8): Connect Aug 12 14:55:58 raspberrypi ModemManager[403]: &lt;info&gt; Modem /org/freedesktop/ModemManager1/Modem/3: state changed (registered -&gt; connecting) Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.1800] modem[&quot;ttyACM4&quot;]: modem state changed, &#39;registered&#39; --&gt; &#39;connecting&#39; (reason: user-requested) Aug 12 14:55:58 raspberrypi ModemManager[403]: &lt;info&gt; Modem /org/freedesktop/ModemManager1/Modem/3: state changed (connecting -&gt; connected) Aug 12 14:55:58 raspberrypi ModemManager[403]: &lt;info&gt; Simple connect state (8/8): All done Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.2225] modem[&quot;ttyACM4&quot;]: modem state changed, &#39;connecting&#39; --&gt; &#39;connected&#39; (reason: user-requested) Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.2267] device (ttyACM4): state change: prepare -&gt; config (reason &#39;none&#39;, sys-iface-state: &#39;managed&#39;) Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.2301] device (ttyACM4): state change: config -&gt; ip-config (reason &#39;none&#39;, sys-iface-state: &#39;managed&#39;) Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;warn&gt; [1565618158.2350] device (ttyACM4): interface ttyACM4 not up for IP configuration Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.2359] modem[&quot;ttyACM4&quot;]: using modem-specified IP timeout: 20 seconds Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.2376] ppp-manager: starting PPP connection Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.2428] ppp-manager: pppd started with pid 3307 Aug 12 14:55:58 raspberrypi pppd[3307]: Plugin /usr/lib/pppd/2.4.7/nm-pppd-plugin.so loaded. Aug 12 14:55:58 raspberrypi NetworkManager[394]: Plugin /usr/lib/pppd/2.4.7/nm-pppd-plugin.so loaded. Aug 12 14:55:58 raspberrypi pppd[3307]: nm-ppp-plugin: (plugin_init): initializing Aug 12 14:55:58 raspberrypi pppd[3307]: pppd 2.4.7 started by root, uid 0 Aug 12 14:55:58 raspberrypi pppd[3307]: nm-ppp-plugin: (nm_phasechange): status 3 / phase &#39;serial connection&#39; Aug 12 14:55:58 raspberrypi pppd[3307]: Using interface ppp0 Aug 12 14:55:58 raspberrypi pppd[3307]: nm-ppp-plugin: (nm_phasechange): status 5 / phase &#39;establish&#39; Aug 12 14:55:58 raspberrypi NetworkManager[394]: Using interface ppp0 Aug 12 14:55:58 raspberrypi NetworkManager[394]: Connect: ppp0 &lt;--&gt; /dev/ttyACM4 Aug 12 14:55:58 raspberrypi pppd[3307]: Connect: ppp0 &lt;--&gt; /dev/ttyACM4 Aug 12 14:55:58 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618158.2740] manager: (ppp0): new Ppp device (/org/freedesktop/NetworkManager/Devices/16) Aug 12 14:55:58 raspberrypi pppd[3307]: nm-ppp-plugin: (nm_phasechange): status 6 / phase &#39;authenticate&#39; Aug 12 14:55:58 raspberrypi pppd[3307]: nm-ppp-plugin: (get_credentials): passwd-hook, requesting credentials... Aug 12 14:55:58 raspberrypi pppd[3307]: nm-ppp-plugin: (get_credentials): got credentials from NetworkManager Aug 12 14:55:58 raspberrypi pppd[3307]: CHAP authentication succeeded: Welcome! Aug 12 14:55:58 raspberrypi NetworkManager[394]: CHAP authentication succeeded: Welcome! Aug 12 14:55:58 raspberrypi NetworkManager[394]: CHAP authentication succeeded Aug 12 14:55:58 raspberrypi pppd[3307]: nm-ppp-plugin: (nm_phasechange): status 8 / phase &#39;network&#39; Aug 12 14:55:58 raspberrypi pppd[3307]: CHAP authentication succeeded Aug 12 14:56:01 raspberrypi pppd[3307]: local IP address 94.197.91.52 Aug 12 14:56:01 raspberrypi NetworkManager[394]: local IP address 94.197.91.52 Aug 12 14:56:01 raspberrypi NetworkManager[394]: remote IP address 192.200.1.21 Aug 12 14:56:01 raspberrypi NetworkManager[394]: primary DNS address 217.171.132.0 Aug 12 14:56:01 raspberrypi NetworkManager[394]: secondary DNS address 217.171.135.0 Aug 12 14:56:01 raspberrypi pppd[3307]: nm-ppp-plugin: (nm_phasechange): status 9 / phase &#39;running&#39; Aug 12 14:56:01 raspberrypi pppd[3307]: remote IP address 192.200.1.21 Aug 12 14:56:01 raspberrypi pppd[3307]: nm-ppp-plugin: (nm_ip_up): ip-up event Aug 12 14:56:01 raspberrypi pppd[3307]: primary DNS address 217.171.132.0 Aug 12 14:56:01 raspberrypi pppd[3307]: nm-ppp-plugin: (nm_ip_up): sending IPv4 config to NetworkManager... Aug 12 14:56:01 raspberrypi pppd[3307]: secondary DNS address 217.171.135.0 Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.3567] device (ppp0): state change: unmanaged -&gt; unavailable (reason &#39;connection-assumed&#39;, sys-iface-state: &#39;external&#39;) Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.3625] ppp-manager: (IPv4 Config Get) reply received. Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.3741] device (ttyACM4): state change: ip-config -&gt; ip-check (reason &#39;none&#39;, sys-iface-state: &#39;managed&#39;) Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.3828] device (ppp0): state change: unavailable -&gt; disconnected (reason &#39;none&#39;, sys-iface-state: &#39;external&#39;) Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.3889] device (ttyACM4): state change: ip-check -&gt; secondaries (reason &#39;none&#39;, sys-iface-state: &#39;managed&#39;) Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.3921] device (ttyACM4): state change: secondaries -&gt; activated (reason &#39;none&#39;, sys-iface-state: &#39;managed&#39;) Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.3967] manager: NetworkManager state is now CONNECTED_LOCAL Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.4147] manager: NetworkManager state is now CONNECTED_SITE Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.4151] policy: set &#39;3 Internet&#39; (ppp0) as default for IPv4 routing and DNS Aug 12 14:56:01 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618161.4156] dns-mgr: Writing DNS information to /sbin/resolvconf Aug 12 14:56:02 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618162.4982] device (ttyACM4): Activation: successful, device activated. Aug 12 14:56:02 raspberrypi NetworkManager[394]: &lt;info&gt; [1565618162.5006] manager: NetworkManager state is now CONNECTED_GLOBAL Aug 12 14:56:02 raspberrypi dbus-daemon[391]: [system] Activating via systemd: service name=&#39;org.freedesktop.nm_dispatcher&#39; unit=&#39;dbus-org.freedesktop.nm-dispatcher.service&#39; requested by &#39;:1.8&#39; (uid=0 pid=394 comm=&quot;/usr/sbin/NetworkManager --no-daemon &quot;) Aug 12 14:56:02 raspberrypi systemd[1]: Starting Network Manager Script Dispatcher Service... Aug 12 14:56:02 raspberrypi dbus-daemon[391]: [system] Successfully activated service &#39;org.freedesktop.nm_dispatcher&#39; Aug 12 14:56:02 raspberrypi systemd[1]: Started Network Manager Script Dispatcher Service. Aug 12 14:56:02 raspberrypi nm-dispatcher: req:1 &#39;up&#39; [ppp0]: new request (1 scripts) Aug 12 14:56:02 raspberrypi nm-dispatcher: req:1 &#39;up&#39; [ppp0]: start running ordered scripts... Aug 12 14:56:02 raspberrypi nm-dispatcher: req:2 &#39;connectivity-change&#39;: new request (1 scripts) Aug 12 14:56:03 raspberrypi nm-dispatcher: req:2 &#39;connectivity-change&#39;: start running ordered scripts... .",
    "url": "http://localhost:4000/docs/networkManagerDocs/capture_HL8548networkManager.html",
    "relUrl": "/docs/networkManagerDocs/capture_HL8548networkManager.html"
  }
  ,"18": {
    "title": "",
    "content": "root@raspberrypi:/etc/NetworkManager# cat system-connections/&#39;3 Internet.nmconnection&#39; [connection] id=3 Internet uuid=c7a7a320-b996-4bfe-8ae9-8c776bb89126 type=gsm autoconnect=false permissions=user:pi:; [gsm] apn=3internet number=*99# password-flags=1 [ipv4] dns-search= method=auto [ipv6] addr-gen-mode=stable-privacy dns-search= method=auto .",
    "url": "http://localhost:4000/docs/networkManagerDocs/exampleNetworkManagerConfigFile.html",
    "relUrl": "/docs/networkManagerDocs/exampleNetworkManagerConfigFile.html"
  }
  ,"19": {
    "title": "",
    "content": "This is a system which is connected to the network . Command . $ nmcli c show &#39;O2 Pay and Go (Prepaid)&#39; &gt; file.txt . connection.id: O2 Pay and Go (Prepaid) connection.uuid: e79ee73b-84c1-48b0-b81e-9e0b08a548b5 connection.stable-id: -- connection.type: gsm connection.interface-name: -- connection.autoconnect: no connection.autoconnect-priority: 0 connection.autoconnect-retries: -1 (default) connection.multi-connect: 0 (default) connection.auth-retries: -1 connection.timestamp: 1568211779 connection.read-only: no connection.permissions: user:pi connection.zone: -- connection.master: -- connection.slave-type: -- connection.autoconnect-slaves: -1 (default) connection.secondaries: -- connection.gateway-ping-timeout: 0 connection.metered: unknown connection.lldp: default connection.mdns: -1 (default) connection.llmnr: -1 (default) ipv4.method: auto ipv4.dns: -- ipv4.dns-search: -- ipv4.dns-options: &quot;&quot; ipv4.dns-priority: 0 ipv4.addresses: -- ipv4.gateway: -- ipv4.routes: -- ipv4.route-metric: -1 ipv4.route-table: 0 (unspec) ipv4.ignore-auto-routes: no ipv4.ignore-auto-dns: no ipv4.dhcp-client-id: -- ipv4.dhcp-timeout: 0 (default) ipv4.dhcp-send-hostname: yes ipv4.dhcp-hostname: -- ipv4.dhcp-fqdn: -- ipv4.never-default: no ipv4.may-fail: yes ipv4.dad-timeout: -1 (default) ipv6.method: auto ipv6.dns: -- ipv6.dns-search: -- ipv6.dns-options: &quot;&quot; ipv6.dns-priority: 0 ipv6.addresses: -- ipv6.gateway: -- ipv6.routes: -- ipv6.route-metric: -1 ipv6.route-table: 0 (unspec) ipv6.ignore-auto-routes: no ipv6.ignore-auto-dns: no ipv6.never-default: no ipv6.may-fail: yes ipv6.ip6-privacy: 0 (disabled) ipv6.addr-gen-mode: stable-privacy ipv6.dhcp-duid: -- ipv6.dhcp-send-hostname: yes ipv6.dhcp-hostname: -- ipv6.token: -- ppp.noauth: yes ppp.refuse-eap: yes ppp.refuse-pap: no ppp.refuse-chap: yes ppp.refuse-mschap: yes ppp.refuse-mschapv2: yes ppp.nobsdcomp: no ppp.nodeflate: no ppp.no-vj-comp: no ppp.require-mppe: no ppp.require-mppe-128: no ppp.mppe-stateful: no ppp.crtscts: no ppp.baud: 0 ppp.mru: 0 ppp.mtu: auto ppp.lcp-echo-failure: 0 ppp.lcp-echo-interval: 0 gsm.number: -- gsm.username: payandgo gsm.password: &lt;hidden&gt; gsm.password-flags: 1 (agent-owned) gsm.apn: -- gsm.network-id: -- gsm.pin: &lt;hidden&gt; gsm.pin-flags: 0 (none) gsm.home-only: no gsm.device-id: -- gsm.sim-id: -- gsm.sim-operator-id: -- gsm.mtu: auto proxy.method: none proxy.browser-only: no proxy.pac-url: -- proxy.pac-script: -- GENERAL.NAME: O2 Pay and Go (Prepaid) GENERAL.UUID: e79ee73b-84c1-48b0-b81e-9e0b08a548b5 GENERAL.DEVICES: cdc-wdm0 GENERAL.STATE: activated GENERAL.DEFAULT: yes GENERAL.DEFAULT6: no GENERAL.SPEC-OBJECT: -- GENERAL.VPN: no GENERAL.DBUS-PATH: /org/freedesktop/NetworkManager/ActiveConnection/8 GENERAL.CON-PATH: /org/freedesktop/NetworkManager/Settings/3 GENERAL.ZONE: -- GENERAL.MASTER-PATH: -- IP4.ADDRESS[1]: 10.161.89.159/24 IP4.GATEWAY: 10.161.89.1 IP4.ROUTE[1]: dst = 10.161.89.0/24, nh = 0.0.0.0, mt = 700 IP4.ROUTE[2]: dst = 0.0.0.0/0, nh = 10.161.89.1, mt = 700 IP4.DNS[1]: 82.132.254.2 IP4.DNS[2]: 82.132.254.3 IP6.ADDRESS[1]: fe80::e0d5:4635:f0d6:8985/64 IP6.GATEWAY: -- IP6.ROUTE[1]: dst = fe80::/64, nh = ::, mt = 700 IP6.ROUTE[2]: dst = ff00::/8, nh = ::, mt = 256, table=255 . HL7692 modem information . mmcli -m 5 -- General | dbus path: /org/freedesktop/ModemManager1/Modem/5 | device id: af0ec9dc872ff41c5a2941691c19ab814317106f -- Hardware | manufacturer: Generic | model: MBIM [8087:0911] | revision: M2M_7160_MBIM_CAT1_WW_01.1804. | h/w revision: XMM7160_V1.2_MBIM_NAND_REV_4.5 | supported: gsm-umts, lte | current: gsm-umts, lte | equipment id: 355465070064353 -- System | device: /sys/devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb1/1-1/1-1.1 | drivers: cdc_acm, cdc_mbim | plugin: Generic | primary port: cdc-wdm0 | ports: cdc-wdm0 (mbim), wwan0 (net), ttyACM0 (at) -- Status | unlock retries: sim-pin2 (3) | state: connected | power state: on | access tech: lte | signal quality: 58% (recent) -- Modes | supported: allowed: 2g, 3g, 4g; preferred: none | current: allowed: 2g, 3g, 4g; preferred: none -- IP | supported: ipv4, ipv6, ipv4v6 -- 3GPP | imei: 355465070064353 | enabled locks: fixed-dialing | operator id: 23410 | operator name: O2 - UK | registration: home -- SIM | dbus path: /org/freedesktop/ModemManager1/SIM/4 -- Bearer | dbus path: /org/freedesktop/ModemManager1/Bearer/7 . HL7692 details . ati9 RHL769x.2.26.180400.201802141030.x7120m_1 HL7692 HL769x.2.26 x7120m FUSED 2018-02-14 12:02:13 r12309 .",
    "url": "http://localhost:4000/docs/networkManagerDocs/example_nmcli_configRead_O2_HL7692.html",
    "relUrl": "/docs/networkManagerDocs/example_nmcli_configRead_O2_HL7692.html"
  }
  ,"20": {
    "title": "",
    "content": "RPi4 USB connectors vs EM7455 M.2 uPilot . Check the uPilot USB connected to RPi4 Black Connector . Device 9 is the EM7455 USB 2.0 . pi@raspberrypi:~ $ lsusb -t /: Bus 03.Port 1: Dev 1, Class=root_hub, Driver=dwc_otg/1p, 480M /: Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/4p, 5000M /: Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/1p, 480M |__ Port 1: Dev 2, If 0, Class=Hub, Driver=hub/4p, 480M |__ Port 2: Dev 3, If 0, Class=Human Interface Device, Driver=usbhid, 1.5M |__ Port 3: Dev 9, If 0, Class=Vendor Specific Class, Driver=qcserial, 480M |__ Port 3: Dev 9, If 2, Class=Vendor Specific Class, Driver=qcserial, 480M |__ Port 3: Dev 9, If 3, Class=Vendor Specific Class, Driver=qcserial, 480M |__ Port 3: Dev 9, If 12, Class=Communications, Driver=cdc_mbim, 480M |__ Port 3: Dev 9, If 13, Class=CDC Data, Driver=cdc_mbim, 480M |__ Port 4: Dev 4, If 0, Class=Hub, Driver=hub/4p, 480M |__ Port 4: Dev 5, If 0, Class=Human Interface Device, Driver=usbhid, 1.5M |__ Port 4: Dev 5, If 1, Class=Human Interface Device, Driver=usbhid, 1.5M . Check the uPilot USB connected to RPi4 Blue Connector . Device 3 is the EM7455 USB 3.0 . pi@raspberrypi:~ $ lsusb -t /: Bus 03.Port 1: Dev 1, Class=root_hub, Driver=dwc_otg/1p, 480M /: Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/4p, 5000M |__ Port 1: Dev 3, If 0, Class=Vendor Specific Class, Driver=qcserial, 5000M |__ Port 1: Dev 3, If 2, Class=Vendor Specific Class, Driver=qcserial, 5000M |__ Port 1: Dev 3, If 3, Class=Vendor Specific Class, Driver=qcserial, 5000M |__ Port 1: Dev 3, If 12, Class=Communications, Driver=cdc_mbim, 5000M |__ Port 1: Dev 3, If 13, Class=CDC Data, Driver=cdc_mbim, 5000M /: Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/1p, 480M |__ Port 1: Dev 2, If 0, Class=Hub, Driver=hub/4p, 480M |__ Port 2: Dev 3, If 0, Class=Human Interface Device, Driver=usbhid, 1.5M |__ Port 4: Dev 4, If 0, Class=Hub, Driver=hub/4p, 480M |__ Port 4: Dev 5, If 0, Class=Human Interface Device, Driver=usbhid, 1.5M |__ Port 4: Dev 5, If 1, Class=Human Interface Device, Driver=usbhid, 1.5M . From https://www.linux.com/learn/intro-to-linux/2017/3/deep-hardware-discovery-lshw-and-lsusb-linux USB versions of the connected devices 1.5M = USB 1.1 480M = USB 2.0 5000M = USB 3.0 .",
    "url": "http://localhost:4000/docs/uPilot_m.2/RPi4_USB_EM7455.html",
    "relUrl": "/docs/uPilot_m.2/RPi4_USB_EM7455.html"
  }
  ,"21": {
    "title": "",
    "content": "",
    "url": "http://localhost:4000/docs/uPilot_m.2/",
    "relUrl": "/docs/uPilot_m.2/"
  }
  
}